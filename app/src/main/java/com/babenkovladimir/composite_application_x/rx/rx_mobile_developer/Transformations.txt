Оператор map - пометить метко каждый элемент данных. Внутри можно преобразовывать
flatMap - возвращает Observable того же типа, как и дженерик. Не отвечает за порядок входа
switchMap - соблюдает порядок обрабатыват последнего
concatMap - сохраняет порядок, но всё будет выходить в порядке

к примеру есть лента новостей - надо показывать последнюю новость. можно использовать swithMap - ему не важно на последние данные
для отображения аватарок подойдёт concatMap - задержка минимальная, но сохраниться порядок


Остальные Опраторы:

buffer - принимает на фход число и потом передаёт на выход  некий bundl, размер которого определяется числом буфера
groupBy - отделить от всего массива по определённому параметру. разбить выборку по определённым параметрам
scan - это как map -но он учитывает предыдущие значения

Операторы фильтрации
debounse - отложени
distinct - не даёт повторяющимся данным попасть в поток. убирает дубли из потока данных.(Для кастомных классов необходимо переопределить методы equals и hashcode)
at - пропускает только конкретную позицию. 
filter - оператор функция, которая возвращает bool. Хотим знать страны, в которых температура выше 30 градусов. Работает как предикат.
ignoreElements - игнорирует всё, и (Это есть типа Compleatable)
sample - с определённо последовательностью забирает последнее, что там сейчас есть. К примеру берёт последнюю геолокацию юзера за 30 минут.
skip, skipLast - пропустить определённо количество выходящих параметров. skip(3) - пропустит первые 3 сигнала.

Лекция 3. Операторы екомбинирования! Очень важные опре

zip - комбинирует эмиссию двух источников данных в специфическую бифункцию. И В дальнейшем он сам является источником данных! с тем типом, который указывается в типе бифункции
merge - комбинирует 2 потока данных, например observable превращая их в один поток, как слияние 2 рек в одну
join - как только 2 потока данных пересекаются, результат будет отправлен как бы из одного источника данных. 
combineLatest - выбирает последние элементы из 2 потоков данных, где их результат смешивается и из них идёт работа как из 2 потков данных(2 списка с последними значениями)
concat - как merge - он не выплёвывает в onNext все данные, которые приши из 2 и более, а дожидается выполнения более ранней эмисси, чтобы обработать новое. (Как раз кешировние!!!)

switchOnNext - ра4ботает с первым источником даннх  до тех пор, пока не начал эмитить второй источник и он переключается на него( первый кеш, а второй более приоритетный - из сети, то можно 
использовать этот опратор, чтобы отображать данные из кеша пока не пришли данные из сети)


Другие опреаторы!!!

delay - сдвигает выдачу данных.
do - doOnNext?, d
timeInterval - сколько времени прошло с предидущего события. Проще - 
timestamp - полезно чтобы писать, когда именно были олучены данный
timeout - выбрасывает ошибку после определённого времени, если итемы не были выпущены
all - все ли полученные итемы соответсвуют условиям
containce - есть некий атем среди выпущеных
defaultIfEmpty - можно использовать для заглушек
count - возвращает количество данных, выпущенных источником данных


--------------------- Rx binding!!!!